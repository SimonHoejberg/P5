const int camHight = 88;
const int camWidth = 144;
const float diff = 1.9;

#define MAXHIST 20;
#define CAMADDR 0x02
#include "nxtcamlib-default.nxc"
#include "TurretLib.nxc"
const int maxHist = MAXHIST;
int turn = 0;
int nblobs;
bool searching = true;
int hist[MAXHIST];
int histLoc = 0;

void rotate();
task shoot();
task Track();
int MakeBlob(int bl, int br);

task main(){
  int init;
  SetSensorUltrasonic(sensorLeft);
  SetSensorUltrasonic(sensorRight);
  Precedes(Track);
  init = NXTCam_Init(camPort, CAMADDR);
  NXTCam_SendCommand(camPort, CAMADDR, 'E');
}

task search(){
    searching = true;
    if(turn == 1){
        OnRev(rotateMotor, 35);
    }
    else if(turn == 2 || turn == 0){
        OnFwd(rotateMotor, 35);
    }
}

void Rotate(){
    PosRegEnable(angleMotor);
    SetMotorRegulationTime(100);
    
    int dis, newAngle, check, i;
    
    for(i = 0; i < 3; i++){
        WriteI2CRegister(sensorRight, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);
        int right = SensorUS(sensorRight);
        WriteI2CRegister(sensorRight, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);

        WriteI2CRegister(sensorLeft, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);
        int left = SensorUS(sensorLeft);
        WriteI2CRegister(sensorLeft, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);

        check = CheckLength(right, left);
        if(check == 0){
          newAngle = GetAngle(right);
          Angle(newAngle);
          return;
        }
        else if(check == 1){
            newAngle = GetAngle(left);
            Angle(newAngle);
            return;
        }
    }
    StopTask(shoot);
    StartTask(Track);
}

task shoot(){
    StopTask(Track);
    StopTask(search);
    LoadRound();
    //Rotate();
    Fire();
    StartTask(Track);
}

int FilterBlobs(int nblobs,int bc[], int bl[], int bt[], int br[], int bb[],int &leftOut){
    int left = 0;
    int right = 0;
    int top = 0;
    int bottom = 0;
    for(int i = 0;i < nblobs;i++){
        if(bl[i] > left){
            left = bl[i];
        }
        if(br[i] > right){
            right = br[i];
        }
        if(bt[i] > top){
            top = bt[i];
        }
        if(bb[i] > bottom){
            bottom = br[i];
        }
    }
    leftOut = left;
    return MakeBlob(left,right);
}

int MakeBlob(int bl, int br){
    int tempWidth = br-bl;
    int combined = 0;
    int n = 0;
    hist[histLoc] = tempWidth;
    if(histLoc < maxHist - 1){
        histLoc++;
    }
    else{
        histLoc = 0;
    }
    for(int i = 0; i < 9; i++){
        if(hist[i] != 0){
            combined += hist[i];
            n++;
        }
    }
    int avg = combined / n;
    if(tempWidth > avg*diff ){
        return 0;
    }
    else if(tempWidth < avg* (1-(diff-1))){
        return 0;
    }
    else{
        return tempWidth;
    }
}


task Track(){
    int bc[10];
    int bl[10];
    int bt[10];
    int br[10];
    int bb[10];
    int width = 0;
    int left = 0;
    
    while(true){
        NXTCam_GetBlobs(camPort, CAMADDR, nblobs, bc, bl, bt, br, bb);
        if(nblobs >= 1){
            width = FilterBlobs(nblobs,bc,bl,bt,br,bb,left);

            if(width!=0){
                StopTask(search);
                Off(rotateMotor);

                if((width/2) < (camWidth/2)){
                    Off(rotateMotor);
                    OnRev(rotateMotor, 30);
                    turn = 1;
                }
                else if((width/2) > (camWidth/2)){
                    Off(rotateMotor);
                    OnFwd(rotateMotor, 30);
                    turn = 2;
                }
                else{
                    Off(rotateMotor);
                    StartTask(shoot);
                }
            }
        }
        else{
            Off(rotateMotor);
            StartTask(search);
        }
    }
}
