#include "TurretLib.nxc"
#include "nxtcamlib-default.nxc"
#define CAM_ADDR 0x02
const int DATASETS_NEEDED_TO_CALCULATE = 2;
const int MAX_COUNTER_TO_PURGE_DATA = 150;

task search();
task GetLength();
task waitAndFire();
PosData data[10];
int dataCounter = 0;
fireData fire;
bool stopFire = false;
bool track = true;
bool sampling = true;
bool shouldFire = false;


task main(){
    PosRegEnable(ROTATE_MOTOR);
    PosRegEnable(ANGLE_MOTOR);
    SetMotorRegulationTime(10);
    int init = NXTCam_Init(CAM_PORT, CAM_ADDR);
    NXTCam_SendCommand(CAM_PORT, CAM_ADDR, 'A');
    NXTCam_SendCommand(CAM_PORT, CAM_ADDR, 'E');
    SetSensorUltrasonic(SENSOR_LEFT);
    SetSensorUltrasonic(SENSOR_RIGHT);
    Precedes(search,GetLength);
}

task GetLength(){
    string input;
    int length;
    while(sampling){
        if(shouldFire){
            length = GetDistance();
            if(length != -1){
                PosData temp;
                if(makePosData(length,GetMotorAngle(),CurrentTick(),temp)){
                    PlaySound(SOUND_LOW_BEEP);
                    data[dataCounter] = temp;
                    dataCounter++;
                }

                if(dataCounter == DATASETS_NEEDED_TO_CALCULATE){
                    track = false;
                    directionVector d = calcDirVector(data,dataCounter);
                    fire = calcFireData(calcFuturePos(d,1500));
                    StartTask(waitAndFire);
                }
            }
        }
    }

}

task waitAndFire(){
    sampling = false;
    LoadRound();
    Off(ROTATE_MOTOR);
    int angleH = fire.angleH;
    RotateH(angleH);
    Wait(150);
    Angle(fire.angleV);
    while(!stopFire){
        if(CurrentTick() >= fire.timeToHit){
            Fire();
            stopFire = true;
        }
    }
    Angle(0);
}

task search(){
    int bt[10];
    int bl[10];
    int bc[10];
    int bb[10];
    int br[10];
    int nblobs;
    int counter = 0;
    int oldCenter = 0;
    int center = 0;
    int direction = 0; // [-1]Left, [1]Right, [0]Nothing
    int directionCount = 0; //How many times have we seen movement in a direction
    int directionThreshold = 15; //Nr of frames where target has moved in a direction

    while(track){
        NXTCam_GetBlobs(CAM_PORT, CAM_ADDR, nblobs, bc, bl, bt, br, bb);
        if(nblobs > 0){
            shouldFire = true;
            counter = 0;
            center = (bl[0] + UpperBound(br[0]))/2;
            int temp = CAM_CENTER - center;
            oldCenter = center;
            Off(ROTATE_MOTOR);
            OnFwd(ROTATE_MOTOR, GetSpeed(center));
        }else{
            shouldFire = false;
            counter++;
            if(counter == MAX_COUNTER_TO_PURGE_DATA){
                counter = 0;
                data =  NULL;
                dataCounter = 0;
                ResetLibVariables();
                directionCount = 0;
                Off(ROTATE_MOTOR);
            }
        }
        //If direction not found. Check if blob-center has moved left/right for directionTreshold * frames
        if(direction != 0){
            //Check what direction the target is moving
            if(center > oldCenter){
                directionCount++;
            }
            else if (center < oldCenter) {
                directionCount--;
            }
            //Set direction if count above threshold
            if(directionCount > directionThreshold){
                direction = 1;
            }
            else if(directionCount < directionThreshold * (-1)){
                direction = -1;
            }
        }
    }
  Off(ROTATE_MOTOR);
}
