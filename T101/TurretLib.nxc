#include "TargetPrediction/CalcFPos.nxc"
const byte CAM_PORT = IN_1;
const byte SENSOR_LEFT = S3;
const byte SENSOR_RIGHT = S2;
const byte ANGLE_MOTOR = OUT_C;
const byte ROTATE_MOTOR = OUT_A;
const byte FIRE_MOTOR = OUT_B;
const int CAM_CENTER = 72;
const int ANGLE_OFFSET_V = 4;
const int MAX_DISTANCE = 230;
const int DATASETS_NEEDED_TO_CALCULATE = 2;
const int MAX_COUNTER_TO_PURGE_DATA = 150;
const int DIRECTION_THRESHOLD = 7;
const long MILLISECONDS_TO_HIT = 1500;
bool loaded = false;
unsigned long currentTime = 0;
int lib_direction = 0;

float GetMotorAngle(){
    return MotorRotationCount(ROTATE_MOTOR)*0.73;
}

void TurnTurret(float angle){
    RotateMotor(ROTATE_MOTOR,25,angle*1.375);
}

void Left(int power, int angle){
    RotateMotor(ROTATE_MOTOR, power, angle);
}

void Right(int power, int angle){
    RotateMotor(ROTATE_MOTOR, power, angle);
}

void Angle(int angle){
    int pos = (5 * angle)-ANGLE_OFFSET_V;
    PosRegSetAngle(ANGLE_MOTOR, -pos);
}

void RotateH(float angle){
    float pos = (angle - GetMotorAngle());
    RotateMotor(ROTATE_MOTOR, 100, pos);
    
}

void LoadRound(){
    if(!loaded){
        loaded = true;
        RotateMotor(FIRE_MOTOR, 100, -90);
    }
}

void Fire(){
    loaded = false;
    RotateMotor(FIRE_MOTOR, 100, 90);
}

int UpperBound(int normal){
    if(normal > 148)
        return 148;
    else
        return normal;
}

int CheckLength(int right, int left){
    if(left < MAX_DISTANCE){
        return left;
    }
    else if(right < MAX_DISTANCE){
        return right;
    }
    else{
        return -1;
    }
}

int GetDistance(){
    WriteI2CRegister(SENSOR_RIGHT, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);
    int right = SensorUS(SENSOR_RIGHT);
    WriteI2CRegister(SENSOR_RIGHT, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);

    WriteI2CRegister(SENSOR_LEFT, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);
    int left = SensorUS(SENSOR_LEFT);
    WriteI2CRegister(SENSOR_LEFT, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);
    return CheckLength(right,left);
}

int GetAngle(int distance){
    float dis = distance/100;
    int res = 6.5593*(dis*dis)-(0.9564*dis)+0.0607;
    return res;
}

float GetSpeed(int bcenter){
    int length = bcenter - CAM_CENTER;
    float lib_speed = sind(1.25*length)*100;
    return lib_speed;
}

void ResetLibVariables(){
    calcLib_currentAngle = 0;
    calcLib_currentGroup = 0;
}

void DetermineDirection(int center, int oldCenter, int &directionCount){
    //If direction not found. Check if blob-center has moved left/right for directionTreshold * frames
    if(lib_direction == 0){
        //Check what direction the target is moving
        if(center > oldCenter){
            directionCount++;
        }
        else if (center < oldCenter) {
            directionCount--;
        }
        //Set direction if count above threshold
        if(directionCount > DIRECTION_THRESHOLD){
            lib_direction = 1;
        }
        else if(directionCount < DIRECTION_THRESHOLD * (-1)){
            lib_direction = -1;
        }
    }
}

