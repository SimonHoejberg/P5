const byte camPort = IN_1;
const byte sensorLeft = S3;
const byte sensorRight = S2;
const byte angleMotor = OUT_C;
const byte rotateMotor = OUT_A;
const byte fireMotor = OUT_B;
const int camCenter = 72;
const int angleOffsetV = 4;
const float speedBuf = 1.2;
const int MAX_DISTANCE = 230;
const float ADD_TO_SPEED = 0.2;
byte handle = 0; // file handle
bool loaded = false;
unsigned long currentTime = 0;
float speed = 0;
int Direction = 0;


void TurnTurret(float angle){
    RotateMotor(rotateMotor,25,angle*1.375);
}

void Left(int power, int angle){
    RotateMotor(rotateMotor, power, angle);
}

void Right(int power, int angle){
    RotateMotor(rotateMotor, power, angle);
}

void Angle(int angle){
    int pos = (5 * angle)-angleOffsetV;
    PosRegSetAngle(angleMotor, -pos);
}

void RotateH(float angle){
    //float pos = 1.375 * angle;
    //PosRegSetAngle(rotateMotor, pos);
    
    float pos = (angle - MotorRotationCount(rotateMotor)*0.73);
    RotateMotor(rotateMotor, 100, pos);
    
}

void LoadRound(){
    if(!loaded){
        loaded = true;
        RotateMotor(fireMotor, 100, -90);
    }
}

void Fire(){
    loaded = false;
    RotateMotor(fireMotor, 100, 90);
}

int UpperBound(int normal){
    if(normal > 148)
        return 148;
    else
        return normal;
}

int CheckLength(int right, int left){
    if(left < MAX_DISTANCE){
        return left;
    }
    else if(right < MAX_DISTANCE){
        return right;
    }
    else{
        return -1;
    }
}

int GetDistance(){
    WriteI2CRegister(sensorRight, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);
    int right = SensorUS(sensorRight);
    WriteI2CRegister(sensorRight, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);

    WriteI2CRegister(sensorLeft, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);
    int left = SensorUS(sensorLeft);
    WriteI2CRegister(sensorLeft, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);
    return CheckLength(right,left);
}

int GetAngle(int distance){
    float dis = distance/100;
    int res = 6.5593*(dis*dis)-(0.9564*dis)+0.0607;
    return res;
}

float GetSpeed(int bcenter){
    int length;
    length = bcenter - camCenter;
    speed = length *0.4;
    return speed;
}
