const byte camPort = IN_1;
const byte sensorLeft = S3;
const byte sensorRight = S2;
const byte angleMotor = OUT_C;
const byte rotateMotor = OUT_A;
const byte fireMotor = OUT_B;
const int camCenter = 72;
byte handle = 0; // file handle


void Left(int power, int angle){
  RotateMotor(rotateMotor, power, angle);
}

void Right(int power, int angle){
  RotateMotor(rotateMotor, power, angle);
}

void Angle(int angle){
  int pos = 5 * angle;
  PosRegSetAngle(angleMotor, -pos);
}

void LoadRound(){
  RotateMotor(fireMotor, 100, -90);
}

void Fire(){
  RotateMotor(fireMotor, 100, 90);
}

int GetAngle(int distance){
  float dis = distance/100;
  int res = 6.5593*(dis*dis)-(0.9564*dis)+0.0607;
  return res;
}

int CheckLength(int right, int left){
  if(right == left && right != 255){
    return right;
  }
  else if(right == 255 && left != 255){
    return left;
  }
  else if(left == 255 && right != 255){
    return right;
  }
  else{
    return -1;
  }
}

float GetFactorFromLength(){
  WriteI2CRegister(sensorRight, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);
  int right = SensorUS(sensorRight);
  WriteI2CRegister(sensorRight, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);

  WriteI2CRegister(sensorLeft, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);
  int left = SensorUS(sensorLeft);
  WriteI2CRegister(sensorLeft, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);

  int res = CheckLength(right, left);
  if(res < 0){
    return 0.6;
  }
  else{
    return res * (-1/254) + 0.9999999999;
  }
}

int GetSpeed(int bcenter){
  int length;
  length = bcenter - camCenter;
  float factor = 0.6;
  if(length < 0){
    factor = 1;
  }
  string input = NumToStr(length);
  input += "\n";
  Write(handle, input);
  return length * factor;
  
  
}
