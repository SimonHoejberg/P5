#include "TurretLib.nxc"
#include "nxtcamlib-default.nxc"
#define CAM_ADDR 0x02

task Track();
task GetDataAndCalculate();
task WaitAndFire();
PosData posData[10];     //Used to store the data collected from the sensor
int posDataCounter = 0;  //How many elements there are in the posData array
FireData fire;           //The final fire data used to shoot at the target
bool track = true; //Used to stop the tracking from the other tasks
bool collecting = true; //Used to stop the collecting of data from the other tasks
bool blobInCam = false; //Used to tell when the ultra sonic sensor should measure distance
bool alreadyFired = false; //Used to prevent the turret from shooting multiple times per run

task main(){
    PosRegEnable(ROTATE_MOTOR);
    PosRegEnable(ANGLE_MOTOR);
    SetMotorRegulationTime(10);
    NXTCam_Init(CAM_PORT, CAM_ADDR);
    NXTCam_SendCommand(CAM_PORT, CAM_ADDR, 'A');  //Sort blobs command
    NXTCam_SendCommand(CAM_PORT, CAM_ADDR, 'E');  //Start camera tracking
    SetSensorUltrasonic(SENSOR_LEFT);
    SetSensorUltrasonic(SENSOR_RIGHT);
    Precedes(Track,GetDataAndCalculate);  //Starts both tasks
}

task GetDataAndCalculate(){
    int length;
    while(collecting){
        if(blobInCam){
            length = GetDistance();
            if(length != NO_DATA){
                PosData tempPosData;
                //Tries to create a position data from the length and angle
                //If it can returns the position data in the temPosData
                if(MakePosData(length,GetMotorAngle(),CurrentTick(),tempPosData)){
                    PlaySound(SOUND_LOW_BEEP);
                    posData[posDataCounter] = tempPosData;
                    posDataCounter++;
                }

                if(posDataCounter == DATASETS_NEEDED_TO_CALCULATE){
                    //Stops tracking and calculate the vectors and fire data
                    track = false;     //Break the track loop
                    Off(ROTATE_MOTOR); //Stop the motor
                    StopTask(Track);   //Kill the track task to stop it from controlling the rotate motor
                    DirectionVector vector = CalcDirVector(posData,posDataCounter);
                    fire = CalcFireData(CalcFuturePos(vector,MILLISECONDS_TO_HIT));
                    StartTask(WaitAndFire);
                }
            }
        }
    }

}

task WaitAndFire(){
    collecting = false;
    LoadRound();
    Off(ROTATE_MOTOR);
    //Rotate and angles the turret
    RotateH(fire.angleH);
    Angle(fire.angleV);
    //Waits for the right time to fire
    while(true){
        if(CurrentTick() >= fire.timeToHit && !alreadyFired){
            alreadyFired = true;
            Fire();
            break;
        }
    }
    Angle(START_ANGLE); //Resets the angle back to 0
    //Sets all the different global values such that the turret can run again
    track = true;
    blobInCam = false;
    collecting = true;
    posData =  NULL;
    posDataCounter = 0;
    ResetLibVariables();
    alreadyFired = false;
    Wait(4000);     //Waits 4 seconds such that it does not fire at the same target again
    StartTask(Track);
    StartTask(GetDataAndCalculate);
}

task Track(){
    int bt[10]; //Blob top coordinat
    int bl[10]; //Blob left coordinat
    int bc[10]; //Blob color
    int bb[10]; //Blob bottom coordinat
    int br[10]; //Blob right coordinat
    int nblobs; //Number of blobs
    int blobsMissedCounter = 0;  //How many times a call to the camera has returned no blobs
    int oldBlobCenter = 0;
    int blobCenter = 0;
    lib_direction = 0; // [-1]Left, [1]Right, [0]Nothing
    int directionCount = 0; //How many times have we seen movement in a direction

    while(track){
        NXTCam_GetBlobs(CAM_PORT, CAM_ADDR, nblobs, bc, bl, bt, br, bb);
        if(nblobs > 0){
            blobInCam = true;
            blobsMissedCounter = 0;
            oldBlobCenter = blobCenter;
            blobCenter = (bl[0] + UpperBound(br[0]))/2;
            int tempSpeed = 0;
            Off(ROTATE_MOTOR);
            if(lib_direction != NO_DIRECTION){
                tempSpeed = GetSpeed(blobCenter );
                //Makes sure that the turret can only turn in the direction the target is driveing
                if(tempSpeed > 0 && lib_direction == RIGHT_DIRECTION)
                    OnFwd(ROTATE_MOTOR, tempSpeed);
                else if(tempSpeed < 0 && lib_direction == LEFT_DIRECTION)
                    OnFwd(ROTATE_MOTOR, tempSpeed);
            }
        }else{
            blobInCam = false;
            blobsMissedCounter++;
            //If enough blobs are missed sets all the different global values such that the turret can run again
            if(blobsMissedCounter == MAX_COUNTER_TO_PURGE_DATA){
                blobsMissedCounter = 0;
                posData =  NULL;
                posDataCounter = 0;
                ResetLibVariables();
                directionCount = 0;
            }
            Off(ROTATE_MOTOR);
        }
        //Used to determine what direction the target er driveing in
        DetermineDirection(blobCenter, oldBlobCenter, directionCount);

    }
  Off(ROTATE_MOTOR);
}
