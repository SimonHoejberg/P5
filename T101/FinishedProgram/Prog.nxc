#include "TurretLib.nxc"
#include "nxtcamlib-default.nxc"
#define CAM_ADDR 0x02

task Track();
task GetDataAndCalculate();
task WaitAndFire();
PosData posData[10];
int posDataCounter = 0;
FireData fire;
bool track = true; //Used to stop the tracking from the other tasks
bool collecting = true; //Used to stop the collecting of data from the other tasks
bool blobInCam = false; //Used to tell when the ultra sonic sensor should measure distance
bool alreadyFired = false;

task main(){
    PosRegEnable(ROTATE_MOTOR);
    PosRegEnable(ANGLE_MOTOR);
    SetMotorRegulationTime(10);
    NXTCam_Init(CAM_PORT, CAM_ADDR);
    NXTCam_SendCommand(CAM_PORT, CAM_ADDR, 'A');
    NXTCam_SendCommand(CAM_PORT, CAM_ADDR, 'E');
    SetSensorUltrasonic(SENSOR_LEFT);
    SetSensorUltrasonic(SENSOR_RIGHT);
    Precedes(Track,GetDataAndCalculate);
}

task GetDataAndCalculate(){
    string input;
    int length;
    while(collecting){
        if(blobInCam){
            length = GetDistance();
            if(length != NO_DATA){
                PosData tempPosData;
                if(MakePosData(length,GetMotorAngle(),CurrentTick(),tempPosData)){
                    PlaySound(SOUND_LOW_BEEP);
                    posData[posDataCounter] = tempPosData;
                    posDataCounter++;
                }

                if(posDataCounter == DATASETS_NEEDED_TO_CALCULATE){
                    track = false;
                    DirectionVector vector = CalcDirVector(posData,posDataCounter);
                    fire = CalcFireData(CalcFuturePos(vector,MILLISECONDS_TO_HIT));
                    StartTask(WaitAndFire);
                }
            }
        }
    }

}

task WaitAndFire(){
    collecting = false;
    LoadRound();
    Off(ROTATE_MOTOR);
    int angleH = fire.angleH;
    RotateH(angleH);
    Angle(fire.angleV);
    while(true){
        if(CurrentTick() >= fire.timeToHit && !alreadyFired){
            alreadyFired = true;
            Fire();
            break;
        }
    }
    Angle(START_ANGLE);
    track = true;
    blobInCam = false;
    collecting = true;
    posData =  NULL;
    posDataCounter = 0;
    ResetLibVariables();
    alreadyFired = false;
    Wait(4000);
    StartTask(Track);
    StartTask(GetDataAndCalculate);
}

task Track(){
    int bt[10];
    int bl[10];
    int bc[10];
    int bb[10];
    int br[10];
    int nblobs;
    int blobsMissedCounter = 0;
    int oldBlobCenter = 0;
    int blobCenter = 0;
    lib_direction = 0; // [-1]Left, [1]Right, [0]Nothing
    int directionCount = 0; //How many times have we seen movement in a direction

    while(track){
        NXTCam_GetBlobs(CAM_PORT, CAM_ADDR, nblobs, bc, bl, bt, br, bb);
        if(nblobs > 0){
            blobInCam = true;
            blobsMissedCounter = 0;
            oldBlobCenter = blobCenter;
            blobCenter = (bl[0] + UpperBound(br[0]))/2;
            int tempSpeed = 0;
            Off(ROTATE_MOTOR);
            if(lib_direction!=0){
                tempSpeed = GetSpeed(blobCenter );
                if(tempSpeed > 0 && lib_direction > 0)
                    OnFwd(ROTATE_MOTOR, tempSpeed);
                else if(tempSpeed < 0 && lib_direction < 0)
                    OnFwd(ROTATE_MOTOR, tempSpeed);
            }
        }else{
            blobInCam = false;
            blobsMissedCounter++;
            if(blobsMissedCounter == MAX_COUNTER_TO_PURGE_DATA){
                blobsMissedCounter = 0;
                posData =  NULL;
                posDataCounter = 0;
                ResetLibVariables();
                directionCount = 0;
            }
            Off(ROTATE_MOTOR);
        }
        DetermineDirection(blobCenter, oldBlobCenter, directionCount);

    }
  Off(ROTATE_MOTOR);
}
