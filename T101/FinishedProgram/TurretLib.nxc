#include "CalcFPos.nxc"
bool loaded = false;
unsigned long currentTime = 0;
int lib_direction = NO_DIRECTION;

float GetMotorAngle(){
    return MotorRotationCount(ROTATE_MOTOR)*0.73;  //Returns how much the turret has turned in degrees
}

void Angle(int angle){
    int pos = (5 * angle)-ANGLE_OFFSET_V;
    PosRegSetAngle(ANGLE_MOTOR, -pos);  //Angles the turrets cannon to a certain angle
}

void RotateH(float angle){
    float pos = (angle - GetMotorAngle());
    RotateMotor(ROTATE_MOTOR, 100, pos);   //Rotates the turret to a certain angle
    
}

void LoadRound(){
    if(!loaded){
        loaded = true;
        RotateMotor(FIRE_MOTOR, 100, -90);
    }
}

void Fire(){
    loaded = false;
    RotateMotor(FIRE_MOTOR, 100, 90);
}

//If the right coordinat is greater than the width of the camera, return the width.
int UpperBound(int right){
    if(right > CAM_WIDTH)
        return CAM_WIDTH;
    else
        return right;
}

//Returns the right if it has good data or the left is that has good data
//If both does not contain good data return NO_DATA
int CheckLength(int right, int left){
    if(left < MAX_DISTANCE){
        return left;
    }
    else if(right < MAX_DISTANCE){
        return right;
    }
    else{
        return NO_DATA;
    }
}

//Returns the length to the target or NO_DATA if the length could not be measured
int GetDistance(){
    WriteI2CRegister(SENSOR_RIGHT, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);  //Turns on the right ultrasonic sensor
    int right = SensorUS(SENSOR_RIGHT);
    WriteI2CRegister(SENSOR_RIGHT, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);         //Turns off the right ultrasonic sensor

    WriteI2CRegister(SENSOR_LEFT, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_CONTINUOUS);   //Turns on the left ultrasonic sensor
    int left = SensorUS(SENSOR_LEFT);
    WriteI2CRegister(SENSOR_LEFT, I2C_ADDR_DEFAULT, I2C_REG_CMD, US_CMD_OFF);          //Turns off the left ultrasonic sensor
    return CheckLength(right,left);
}

//Returns the speed based on the blob center
float GetSpeed(int blobcenter){
    int length = blobcenter - CAM_CENTER;
    float lib_speed = sind(MODIFIER*length)* MAX_HORIZONAL_SPEED;
    return lib_speed;
}

//Resets the lib variable such that the turret can be used again
void ResetLibVariables(){
    calcLib_currentAngle = 0;
    calcLib_currentGroup = 0;
}

void DetermineDirection(int center, int oldCenter, int &directionCount){
    //If direction not found. Check if blob-center has moved left/right for directionTreshold * frames
    if(lib_direction == NO_DIRECTION){
        //Check what direction the target is moving
        if(center > oldCenter){
            directionCount++;
        }
        else if (center < oldCenter) {
            directionCount--;
        }
        //Set direction if count above threshold
        if(directionCount > DIRECTION_THRESHOLD){
            lib_direction = RIGHT_DIRECTION;
        }
        else if(directionCount < DIRECTION_THRESHOLD * (-1)){
            lib_direction = LEFT_DIRECTION;
        }
    }
}

