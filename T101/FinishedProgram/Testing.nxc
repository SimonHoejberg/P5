#include "TurretLib.nxc"
#define NAME "Results.dat"
byte handle = 0;
int SIZE = 2048;
bool Assert(int out, int expected){
  if(out == expected){
    return true;
  }
  else{
    return false;
  }
}

bool CalcFireDataTest(){
  PosData input;
  input.xPos = 10;
  input.yPos = 15;
  input.time = 1000;
  input.angle = 50;
  
  FireData out = CalcFireData(input);
  NumOut(30, LCD_LINE1, out.angleH);
  NumOut(30, LCD_LINE2, out.angleV);
  NumOut(30, LCD_LINE3, out.timeToHit);
  if(out.angleH == 50 && out.angleV+1 >= 18.2114583 && out.angleV-1 <= 18.2114583 && out.timeToHit+1>= 996.4471497 && out.timeToHit-1<= 996.4471497 ){
    return true;
  }
  else {
    return false;
  }
}

bool CalcDirVectorTest(){//DOES NOT COMPUTE!!!!
  PosData dataArray[2];

  PosData input1;
  PosData input2;
  input1.xPos = 10;
  input1.yPos = 15;
  input1.time = 1000;
  input1.angle = 50;
  
  input2.xPos = 25;
  input2.yPos = 30;
  input2.time = 1500;
  input2.angle = 75;

  dataArray[0] = input1;
  dataArray[1] = input2;
  DirectionVector out = CalcDirVector(dataArray, 2);
  NumOut(0, LCD_LINE1, out.speedX);
  NumOut(0, LCD_LINE2, out.speedY);
  NumOut(0, LCD_LINE3, out.xPos);
  NumOut(0, LCD_LINE4, out.yPos);
  if(out.speedX == 0.03 && out.speedY == 0.03 && out.xPos == 25 && out.yPos == 30){
    return true;
  }
  else {
    return false;
  }
}

bool CalcFuturePosTest() {
  DirectionVector input;
  input.speedX = 50;
  input.speedY = 35;
  input.xPos = 25;
  input.yPos = 25;
  
  PosData out = CalcFuturePos(input, 1500);

  if(out.xPos == 75025 && out.yPos == 52525 && out.angle == 55.0041359){
    return true;
  }
  else {
    return false;
  }
  
}

bool MakePosDataTest(int length, float angle, unsigned int time, PosData pos){
  calcLib_currentAngle = angle + 8;
  return MakePosData(length, angle, time, pos);
}

bool CombineVectorsTest(){
  DirectionVector input1;
  DirectionVector input2;
  input1.speedX = 10;
  input1.speedY = 10;
  input1.xPos = 15;
  input1.yPos = 15;
  
  input2.speedX = 25;
  input2.speedY = 25;
  input2.xPos = 20;
  input2.yPos = 20;
  DirectionVector dirVecArray[2];
  dirVecArray[0] = input1;
  dirVecArray[1] = input2;
  DirectionVector out = CombineVectors(dirVecArray, 2);
  
  if(out.speedX == 22.5 && out.speedY == 22.5 && out.xPos == 20, out.yPos == 20){
    return true;
  }
  else {
    return false;
  }
}
bool CombineVectorsTest2(){
  DirectionVector input1;
  input1.speedX = 10;
  input1.speedY = 10;
  input1.xPos = 15;
  input1.yPos = 15;

  DirectionVector dirVecArray[1];
  dirVecArray[0] = input1;
  DirectionVector out = CombineVectors(dirVecArray, 1);

  if(out.speedX == 10 && out.speedY == 10 && out.xPos == 15, out.yPos == 15){
    return true;
  }
  else {
    return false;
  }
}
bool UpperBoundTest(int input, int expected){
  int out = UpperBound(input);

  return Assert(out, expected);
}

bool CheckLengthTest(int right, int left, int expected){
  int out = CheckLength(right, left);

  return Assert(out, expected);
}

bool GetSpeedTest(int bcenter, int expected){
  int out = GetSpeed(bcenter);

  if(out == expected){
    return true;
  }
  else{
    return false;
  }
}

task main(){
   unsigned int rtn_code = CreateFile(NAME, SIZE, handle);
   if (rtn_code == LDR_FILEEXISTS)
     rtn_code = OpenFileAppend(NAME, SIZE, handle);
  PosData pos;
  if(CalcDirVectorTest()){
    WriteLn(handle, "CalcDirVectorTest: Passed");
  }
  else{
    WriteLn(handle, "CalcDirVectorTest: Failed");
  }
  
  if(UpperBoundTest(130, 130)){
    WriteLn(handle, "UpperBoundTest: Passed");
  }
  else{
    WriteLn(handle, "UpperBoundTest: Failed");
  }
  
  if(UpperBoundTest(240, 144)){
    WriteLn(handle, "UpperBoundTest2: Passed");
  }
  else{
    WriteLn(handle, "UpperBoundTest2: Failed");
  }
  
  if(CheckLengthTest(230, 215, 215)){
    WriteLn(handle, "CheckLengthTest: Passed");
  }
  else{
    WriteLn(handle, "CheckLengthTest: Failed");
  }
  
  if(GetSpeedTest(45, -33.33421399)){
    WriteLn(handle, "GetSpeedTest: Passed");
  }
  else{
    WriteLn(handle, "GetSpeedTest: Failed");
  }
  
  if(MakePosDataTest(100, 10, CurrentTick(), pos)){
    WriteLn(handle, "MakePosDataTest: Passed");
  }
  else{
    WriteLn(handle, "MakePosDataTest: Failed");
  }

  if(CombineVectorsTest()){
    WriteLn(handle, "CombineVectorsTest: Passed");
  }
  else{
    WriteLn(handle, "CombineVectorsTest: Failed");
  }
  
  if(CombineVectorsTest2()){
    WriteLn(handle, "CombineVectorsTest2: Passed");
  }
  else{
    WriteLn(handle, "CombineVectorsTest2: Failed");
  }
  
  if(CalcFuturePosTest()){
    WriteLn(handle, "CalcFuturePosTest: Passed");
  }
  else{
    WriteLn(handle, "CalcFuturePosTest: Failed");
  }
  
  if(CalcFireDataTest()){
    WriteLn(handle, "CalcFireDataTest: Passed");
  }
  else{
    WriteLn(handle, "CalcFireDataTest: Failed");
  }
  CloseFile(handle);
  while(true){}
}

